const Joi = require('joi');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const responseHelper = require('../../utils/responseHelper');

module.exports = {
    register: async function (req, res) {
        try {
            const schema = Joi.object({
                email: Joi.string().email().required(),
                password: Joi.string().min(6).required(),
                role: Joi.string().valid('user', 'editor').default('user')
            });

            const result = schema.validate(req.body, { stripUnknown: true });
            if (result.error) {
                console.warn('üõë Validate th·∫•t b·∫°i:', result.error.details);
                return res.status(400).json(responseHelper.validationError(result.error));
            }

            const { email, password, role } = result.value;
            console.log('üì• Payload h·ª£p l·ªá:', { email, role });

            const existingUser = await User.findOne({ email });
            if (existingUser) {
                console.warn('‚ùå Email ƒë√£ t·ªìn t·∫°i:', email);
                return res.status(409).json(responseHelper.errorResponse('Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω', 'EMAIL_EXISTS'));
            }

            const roleDoc = await Role.findOne({ name: role });
            if (!roleDoc) {
                console.warn('‚ö†Ô∏è Vai tr√≤ kh√¥ng t·ªìn t·∫°i:', role);
                return res.status(400).json(responseHelper.notFound(`Vai tr√≤ '${role}' kh√¥ng t·ªìn t·∫°i`));
            }

            const hashedPassword = await bcrypt.hash(password, 10);
            console.log('üîê Password ƒë√£ hash');

            const newUser = await User.create({
                email,
                password: hashedPassword,
                role: roleDoc.id
            }).fetch();

            console.log('‚úÖ User ƒë√£ ƒë∆∞·ª£c t·∫°o:', { id: newUser.id, email: newUser.email });

            const token = jwt.sign(
                { userId: newUser.id },
                process.env.JWT_SECRET,
                { expiresIn: '1d' }
            );

            return res.status(201).json(responseHelper.success({
                token,
                user: {
                    id: newUser.id,
                    email: newUser.email,
                    role: roleDoc.name
                }
            }, 'ƒêƒÉng k√Ω th√†nh c√¥ng'));

        } catch (err) {
            console.error('üí• L·ªói trong register:', err);
            return res.status(500).json(responseHelper.serverError(err));
        }
    },

    login: async function (req, res) {
        try {
            const schema = Joi.object({
                email: Joi.string().email().required(),
                password: Joi.string().required()
            });

            const { error, value } = schema.validate(req.body);
            if (error) {
                console.warn('üõë Validate th·∫•t b·∫°i:', error.details);
                return res.status(400).json(responseHelper.validationError(error));
            }

            const { email, password } = value;
            console.log('üì• Payload login:', { email });

            const user = await User.findOne({ email }).populate('role');
            if (!user) {
                console.warn('‚ùå Kh√¥ng t√¨m th·∫•y user:', email);
                return res.status(401).json(responseHelper.notFound('Email kh√¥ng t·ªìn t·∫°i'));
            }

            console.log('üë§ User t√¨m ƒë∆∞·ª£c:', {
                id: user.id,
                email: user.email,
                role: user.role ? user.role.name : null
            });

            if (!user.role) {
                console.warn('‚ö†Ô∏è User ch∆∞a ƒë∆∞·ª£c g√°n role');
                return res.status(403).json(responseHelper.unauthorized('Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c g√°n role'));
            }

            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                console.warn('üîê Sai m·∫≠t kh·∫©u cho user:', email);
                return res.status(401).json(responseHelper.unauthorized('Sai m·∫≠t kh·∫©u'));
            }

            const token = jwt.sign(
                { id: user.id, role: user.role.name },
                process.env.JWT_SECRET,
                { expiresIn: '2d' }
            );

            console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', { userId: user.id });

            res.cookie('token', token, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'lax',
                maxAge: 2 * 24 * 60 * 60 * 1000 // 2 ng√†y
            });

            return res.status(200).json(responseHelper.success({
                token,
                user: {
                    id: user.id,
                    email: user.email,
                    role: user.role.name
                }
            }, 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'));

        } catch (err) {
            console.error('üí• L·ªói trong login:', err);
            return res.status(500).json(responseHelper.serverError(err));
        }
    },

    logout: async function (req, res) {
        try {
            const hasToken =
                (req.cookies && req.cookies.token) ||
                (req.headers.authorization && req.headers.authorization.startsWith('Bearer '));

            console.log('üì§ Logout request nh·∫≠n ƒë∆∞·ª£c - C√≥ token kh√¥ng?', !!hasToken);

            if (!hasToken) {
                return res.status(200).json(
                    responseHelper.success(null, 'B·∫°n ƒë√£ ƒëƒÉng xu·∫•t ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p')
                );
            }

            res.clearCookie('token', {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'lax'
            });

            console.log('üßπ Token ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi cookie');
            return res.status(200).json(
                responseHelper.success(null, 'ƒêƒÉng xu·∫•t th√†nh c√¥ng')
            );

        } catch (err) {
            console.error('‚ùå L·ªói trong logout:', err);
            return res.status(500).json(responseHelper.serverError(err));
        }
    },

    me: async function (req, res) {
        try {
            if (req.user && req.user.id) {
                console.log('üì• Y√™u c·∫ßu l·∫•y th√¥ng tin user - userId:', req.user.id);
            }

            const user = await User.findOne({ id: req.user.id }).populate('role');

            if (!user) {
                console.warn('‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID:', req.user.id);
                return res.status(404).json(responseHelper.notFound('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'));
            }

            if (!user.role) {
                console.warn('‚ö†Ô∏è User kh√¥ng c√≥ role:', user.email);
                return res.status(400).json(responseHelper.badRequest('Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c g√°n vai tr√≤'));
            }

            const role = await Role.findOne({ id: user.role.id }).populate('permissions');

            // console.log(`üë§ Th√¥ng tin user '${user.email}' - Vai tr√≤: '${role.name}' - Permissions:`, role.permissions.map(p => p.name));

            return res.status(200).json(responseHelper.success({
                _id: user.id,
                email: user.email,
                role: {
                    name: role.name,
                    permissions: role.permissions.map(p => p.name)
                }
            }));

        } catch (error) {
            console.error('‚ùå L·ªói trong me:', error);
            return res.status(500).json(responseHelper.serverError(error));
        }
    },
};
